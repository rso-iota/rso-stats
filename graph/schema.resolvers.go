package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"rso-stats/db"
	"rso-stats/graph/model"

	"github.com/redis/go-redis/v9"
)

func playerData(ctx context.Context, client *redis.Client, id string) *model.Player {
	foodEaten, err := client.Get(ctx, id+":food").Int()
	if err != nil {
		if err != redis.Nil {
			db.DbError("Failed to get food", err)
		}
		foodEaten = 0
	}

	deaths, err := client.Get(ctx, id+":deaths").Int()
	if err != nil {
		if err != redis.Nil {
			db.DbError("Failed to get deaths", err)
		}
		deaths = 0
	}

	kills, err := client.Get(ctx, id+":kills").Int()
	if err != nil {
		if err != redis.Nil {
			db.DbError("Failed to get kills", err)
		}
		kills = 0
	}

	player := model.Player{
		FoodEaten: int32(foodEaten),
		Deaths:    int32(deaths),
		Kills:     int32(kills),
	}

	return &player
}

// Player is the resolver for the player field.
func (r *queryResolver) Player(ctx context.Context, id string) (*model.Player, error) {
	return playerData(ctx, r.RedisClient, id), nil
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context, ids []*string) ([]*model.Player, error) {
	players := make([]*model.Player, len(ids))

	for i, id := range ids {
		players[i] = playerData(ctx, r.RedisClient, *id)
	}

	return players, nil
}

// Stats is the resolver for the stats field.
func (r *queryResolver) Stats(ctx context.Context) (*model.GlobalStats, error) {
	totalFood, err := r.RedisClient.Get(ctx, "total_food").Int()
	if err != nil {
		if err != redis.Nil {
			db.DbError("Failed to get total_food", err)
		}
		totalFood = 0
	}

	totalKills, err := r.RedisClient.Get(ctx, "total_kills").Int()
	if err != nil {
		if err != redis.Nil {
			db.DbError("Failed to get total_kills", err)
		}
		totalKills = 0
	}

	stats := model.GlobalStats{
		FoodEaten: int32(totalFood),
		Kills:     int32(totalKills),
	}

	return &stats, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
